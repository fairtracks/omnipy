# generated by datamodel-codegen:
#   filename:  nobel_api_v3.json
#   timestamp: 2024-11-15T12:21:01+00:00

from __future__ import annotations

from datetime import date
from enum import Enum
from typing import List, Optional

import omnipy.util._pydantic as pyd


class SortOrder(Enum):
    field_1 = '1'
    field_2 = '2'
    field_3 = '3'


class Portion(Enum):
    field_1 = '1'
    field_1_2 = '1/2'
    field_1_3 = '1/3'
    field_1_4 = '1/4'


class PrizeStatus(Enum):
    received = 'received'
    declined = 'declined'
    restricted = 'restricted'


class Wikipedia(pyd.BaseModel):
    slug: Optional[str] = pyd.Field(None, description='Wikipedia url slug', example='slug')
    english: Optional[str] = pyd.Field(
        None,
        description='URL to english wikipedia page',
        example='https://en.wikipedia.org/wiki/',
    )


class Wikidata(pyd.BaseModel):
    id: Optional[str] = pyd.Field(None, description='Wikidata id', example='id')
    url: Optional[str] = pyd.Field(
        None,
        description='URL to wikidata entry',
        example='https://www.wikidata.org/wiki/',
    )


class Gender(Enum):
    female = 'female'
    male = 'male'


class NobelPrizesMeta(pyd.BaseModel):
    offset: Optional[int] = None
    limit: Optional[pyd.conint(ge=1)] = None
    nobelPrizeYear: Optional[int] = None
    yearTo: Optional[int] = None
    nobelPrizeCategory: Optional[str] = pyd.Field(None, example='eco')
    count: Optional[int] = None


class LaureatesMeta(pyd.BaseModel):
    offset: Optional[int] = None
    limit: Optional[int] = None
    sort: Optional[str] = None
    ID: Optional[int] = None
    name: Optional[str] = None
    gender: Optional[str] = None
    motivation: Optional[str] = None
    affiliation: Optional[str] = None
    residence: Optional[str] = None
    birthDate: Optional[str] = None
    birthDateTo: Optional[str] = None
    deathDate: Optional[str] = None
    deathDateTo: Optional[str] = None
    foundedDate: Optional[str] = None
    birthCity: Optional[str] = None
    birthCountry: Optional[str] = None
    birthContinent: Optional[str] = None
    deathCity: Optional[str] = None
    deathCountry: Optional[str] = None
    deathContinent: Optional[str] = None
    foundedCity: Optional[str] = None
    foundedCountry: Optional[str] = None
    foundedContinent: Optional[str] = None
    headquartersCity: Optional[str] = None
    headquartersCountry: Optional[str] = None
    headquartersContinent: Optional[str] = None
    nobelPrizeYear: Optional[int] = None
    yearTo: Optional[int] = None
    nobelPrizeCategory: Optional[str] = None
    count: Optional[int] = None


class Links(pyd.BaseModel):
    first: Optional[str] = None
    prev: Optional[str] = None
    self: Optional[str] = None
    next: Optional[str] = None
    last: Optional[str] = None


class ItemLinks(pyd.BaseModel):
    rel: Optional[str] = None
    href: Optional[str] = None
    action: Optional[str] = None
    types: Optional[str] = None


class Translation(pyd.BaseModel):
    en: Optional[str] = pyd.Field(None, example='English')
    se: Optional[str] = pyd.Field(None, example='Svenska')
    no: Optional[str] = pyd.Field(None, example='Norsk')


class Urls(pyd.BaseModel):
    __root__: str = pyd.Field(..., example='https://')


class Error(pyd.BaseModel):
    code: str = pyd.Field(..., example='404')
    message: str = pyd.Field(..., example='There is not Laureate born that date')


class LaureateBasic(pyd.BaseModel):
    id: Optional[pyd.conint(ge=1)] = pyd.Field(None, example=34)
    knownName: Optional[Translation] = None  # Replaced name with knownName and givenName
    givenName: Optional[Translation] = None
    portion: Optional[Portion] = '1'
    sortOrder: Optional[SortOrder] = '1'
    motivation: Optional[Translation] = None
    links: Optional[List[ItemLinks]] = None


class TranslationWithSameas(pyd.BaseModel):
    en: Optional[str] = pyd.Field(None, example='English')
    se: Optional[str] = pyd.Field(None, example='Svenska')
    no: Optional[str] = pyd.Field(None, example='Norsk')
    sameAs: Optional[List[Urls]] = None


class NobelPrize(pyd.BaseModel):
    awardYear: Optional[int] = pyd.Field(None, example=1989)
    category: Optional[Translation] = None
    categoryFullName: Optional[Translation] = None
    dateAwarded: Optional[date] = pyd.Field(None, example='2015-11-12')
    prizeAmount: Optional[int] = pyd.Field(
        None, description='Prize amount given at the year of the award', example=1000000)
    prizeAmountAdjusted: Optional[int] = pyd.Field(
        None,
        description='Prize amount adjusted according to Index number yearly average',
        example=1000000,
    )
    topMotivation: Optional[Translation] = None
    laureates: Optional[List[LaureateBasic]] = None


class Location(pyd.BaseModel):
    city: Optional[Translation] = None
    country: Optional[Translation] = None
    cityNow: Optional[TranslationWithSameas] = None
    countryNow: Optional[TranslationWithSameas] = None
    continent: Optional[Translation] = None
    locationString: Optional[Translation] = None


class Event(pyd.BaseModel):
    date: Optional[date] = pyd.Field(None, example='1989-04-25')
    place: Optional[Location] = None


class Person(pyd.BaseModel):
    knownName: Optional[Translation] = None
    givenName: Optional[Translation] = None
    familyName: Optional[Translation] = None
    fullName: Optional[Translation] = None
    filename: Optional[str] = pyd.Field(
        None,
        description='Short slug version of familyname used in filenames',
        example='filename',
    )
    penname: Optional[str] = pyd.Field(
        None,
        description='Only for some Laureates in Literature category',
        example='Penname',
    )
    gender: Optional[Gender] = pyd.Field(None, example='female')
    birth: Optional[Event] = None
    death: Optional[Event] = None


class Organization(pyd.BaseModel):
    orgName: Optional[Translation] = None
    nativeName: Optional[str] = pyd.Field(None, example='Native name')
    acronym: Optional[str] = pyd.Field(None, example='Acronym')
    founded: Optional[Event] = None
    dissolution: Optional[Event] = None
    headquarters: Optional[Location] = None


class Entity(pyd.BaseModel):
    name: Optional[Translation] = None
    nameNow: Optional[Translation] = None
    nativeName: Optional[str] = pyd.Field(None, example='Le romenic universitet')
    city: Optional[Translation] = None
    country: Optional[Translation] = None
    cityNow: Optional[TranslationWithSameas] = None
    countryNow: Optional[TranslationWithSameas] = None
    locationString: Optional[Translation] = None


class Residence(pyd.BaseModel):
    city: Optional[Translation] = None
    country: Optional[Translation] = None
    cityNow: Optional[TranslationWithSameas] = None
    countryNow: Optional[TranslationWithSameas] = None
    locationString: Optional[Translation] = None


class NobelPrizesResult(pyd.BaseModel):
    nobelPrizes: Optional[List[NobelPrize]] = None
    meta: Optional[NobelPrizesMeta] = None
    links: Optional[Links] = None  # Removed List


class NobelPrizeResult(pyd.BaseModel):
    nobelPrize: Optional[NobelPrize] = None


class NobelPrizePerLaureate(pyd.BaseModel):
    awardYear: Optional[int] = pyd.Field(None, example=1989)
    category: Optional[Translation] = None
    categoryFullName: Optional[Translation] = None
    sortOrder: Optional[SortOrder] = '1'
    portion: Optional[Portion] = '1'
    dateAwarded: Optional[date] = pyd.Field(None, example='1989-04-25')
    prizeStatus: Optional[PrizeStatus] = pyd.Field(None, example='received')
    motivation: Optional[Translation] = None
    prizeAmount: Optional[int] = pyd.Field(
        None, description='Prize amount given at the year of the award', example=1000000)
    prizeAmountAdjusted: Optional[int] = pyd.Field(
        None,
        description='Prize amount adjusted according to Index number yearly average',
        example=1000000,
    )
    affiliations: Optional[List[Entity]] = None
    residences: Optional[List[Residence]] = None
    links: Optional[List[ItemLinks]] = None


class Laureate(pyd.BaseModel):
    id: Optional[pyd.conint(ge=1)] = pyd.Field(None, example=456)
    laureateIfPerson: Optional[Person] = None
    laureateIfOrg: Optional[Organization] = None
    wikipedia: Optional[Wikipedia] = None
    wikidata: Optional[Wikidata] = None
    sameAs: Optional[List[Urls]] = None
    links: Optional[List[ItemLinks]] = None
    nobelPrizes: Optional[List[NobelPrizePerLaureate]] = None


class Laureates(pyd.BaseModel):
    __root__: List[Laureate] = pyd.Field(..., description='Model containing a list of Laureates')


class LaureatesResult(pyd.BaseModel):
    laureates: Optional[Laureates] = None
    meta: Optional[LaureatesMeta] = None
    links: Optional[List[Links]] = None


class LaureateResult(pyd.BaseModel):
    laureate: Optional[Laureate] = None
